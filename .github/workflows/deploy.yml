name: Deploy to Google Cloud Run

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]

env:
  PROJECT_ID: meteor-madness-app
  REGION: us-central1
  SERVICE_NAME: app-web
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: app-repo
  IMAGE_NAME: impactor

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: impactor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true

    - name: Install Ruby dependencies
      run: |
        bundle install --jobs 4 --retry 3

    - name: Set up test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/impactor_test
      run: |
        bin/rails db:create db:schema:load

    - name: Run tests
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/impactor_test
      run: |
        bin/rails test
        bin/rails test:system

    - name: Run security audit
      run: |
        bundle exec bundler-audit --update

  deploy:
    name: Deploy to Cloud Run
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "TIMESTAMP=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

    - name: Set image tag
      id: image
      run: |
        IMAGE_TAG="prod-${{ steps.timestamp.outputs.TIMESTAMP }}-${{ github.sha }}"
        IMAGE_URL="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_OUTPUT
        echo "Building image: ${IMAGE_URL}"

    - name: Build Docker image
      run: |
        docker build \
          --platform linux/amd64 \
          --tag ${{ steps.image.outputs.IMAGE_URL }} \
          --build-arg RAILS_ENV=production \
          .

    - name: Push Docker image to Artifact Registry
      run: docker push ${{ steps.image.outputs.IMAGE_URL }}

    - name: Get Cloud SQL instance connection name
      id: cloudsql
      run: |
        INSTANCE_CONNECTION_NAME=$(gcloud sql instances describe rails-postgres --format="value(connectionName)")
        echo "INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME}" >> $GITHUB_OUTPUT

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ steps.image.outputs.IMAGE_URL }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --service-account "rails-deployer@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --set-cloudsql-instances "${{ steps.cloudsql.outputs.INSTANCE_CONNECTION_NAME }}" \
          --set-secrets "RAILS_MASTER_KEY=rails-master-key:latest,DATABASE_URL=database-url:latest" \
          --set-env-vars "RAILS_ENV=production,RAILS_LOG_TO_STDOUT=true,RAILS_SERVE_STATIC_FILES=true" \
          --cpu=1 \
          --memory=1Gi \
          --concurrency=20 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300 \
          --port=3000 \
          --quiet

    - name: Get service URL
      id: service
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_OUTPUT
        echo "Service deployed to: ${SERVICE_URL}"

    - name: Test deployment
      run: |
        echo "Testing deployment..."
        for i in {1..30}; do
          if curl -sf "${{ steps.service.outputs.SERVICE_URL }}" >/dev/null; then
            echo "✅ Service is responding correctly!"
            exit 0
          fi
          echo "Attempt $i/30: Service not ready, waiting 10 seconds..."
          sleep 10
        done
        echo "❌ Service failed to respond after 5 minutes"
        exit 1

    - name: Clean up old images
      run: |
        echo "Cleaning up old Docker images..."
        # Keep only the 10 most recent images
        gcloud artifacts docker images list ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }} \
          --format="value(IMAGE)" --limit=999 --sort-by="CREATE_TIME" | head -n -10 | \
          while read -r image; do
            echo "Deleting old image: $image"
            gcloud artifacts docker images delete "$image" --quiet || true
          done

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Service URL | [${{ steps.service.outputs.SERVICE_URL }}](${{ steps.service.outputs.SERVICE_URL }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | \`${{ steps.image.outputs.IMAGE_URL }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ env.REGION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Timestamp | ${{ steps.timestamp.outputs.TIMESTAMP }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: Notify on Failure
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/master'
    
    steps:
    - name: Create failure summary
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The deployment to Google Cloud Run failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Troubleshooting Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the failed job logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify all secrets are properly set" >> $GITHUB_STEP_SUMMARY
        echo "3. Ensure the service account has proper permissions" >> $GITHUB_STEP_SUMMARY
        echo "4. Check Cloud Run service limits and quotas" >> $GITHUB_STEP_SUMMARY